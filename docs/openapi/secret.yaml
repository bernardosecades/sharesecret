openapi: 3.0.0
info:
  title: ZasLink API
  description: API for creating secrets and share them
  version: 1.0.0
servers:
  - url: https://api.zaslink.com/v1/
    description: Production server
  - url: http://localhost:8080/v1/
    description: Local server
paths:
  /secret/{private_id}:
    delete:
      tags:
        - Secret
      summary: Delete a secret
      description: Permanently delete a secret identified by the private ID.
      parameters:
        - in: path
          name: private_id
          schema:
            type: string
          required: true
          description: Private ID of the secret
      responses:
        '204':
          description: Successful deletion, no content returned
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: The secret does not exist
                statusCode: 404

  /secret:
    post:
        tags:
          - Secret
        summary: Create a new secret
        description: Create a new secret with or without password
        requestBody:
          description: Create a new secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecretRequest'
              examples:
                Without password:
                  value:
                    content: this is my secret
                With password:
                  value:
                    content: this is my secret
                    pwd: myPassword
                With expiration:
                  value:
                    content: this is my secret
                    expiration: 3d
                With all fields:
                  value:
                    content: this is my secret
                    pwd: myPassword
                    expiration: 3d
          required: true
        responses:
          '201':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateSecretResponse'
                example:
                  id: 37c3d09a-62eb-4654-acd9-7d714d89f6ac
                  private_id: 38cc52aa-e5c2-4574-86fa-e4ba04bfa1da
                  expiredAt: 2024-10-06T13:33:46.099028+02:00
          '400':
            description: Invalid input
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                examples:
                  Invalid Password:
                    value:
                      detail: Invalid password
                      statusCode: 400
                  Password too short:
                    value:
                      detail: Password too short
                      statusCode: 400
                  Password too long:
                    value:
                      detail: Password too long
                      statusCode: 400
                  Empty content:
                    value:
                      detail: Content cannot be empty
                      statusCode: 400
                  Long content:
                    value:
                      detail: Content too long
                      statusCode: 400

  /secret/{id}:
    get:
      tags:
        - Secret
      summary: Show a secret by ID
      description: Returns content decrypt by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the secret to show
        - in: header
          name: X-Password
          schema:
            type: string
          required: false
          description: Password to decrypt de secret

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveSecretResponse'
              example:
                content: this is my secret
        '404':
          description: Secret not found or already read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: The secret does not exist or has already been read
                statusCode: 404
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: invalid password
                statusCode: 400

  /healthz:
    get:
      tags:
        - Monitoring
      summary: Check service status
      description: Check status of service and infrastructure

      responses:
        '200':
          description: OK response
        '500':
          description: Something was wrong
  /metrics:
    get:
      tags:
        - Monitoring
      summary: Prometheus endpoint
      description: Returns metrics from the service
      responses:
        '200':
          description: OK response
        '500':
          description: Something was wrong

components:
  schemas:
    CreateSecretRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: Content to encrypt
        pwd:
          type: string
          description: password to decrypt
        expiration:
          type: string
          description: "expiration can include one of these values: 7d, 3d, 1d, 12h, 4h, 1h, 30m, 5m"
    CreateSecretResponse:
      type: object
      required:
        - id
        - privateId
        - expiredAt
      properties:
        id:
          type: string
          description: identifier of secret
        privateId:
          type: string
          description: private identifier of secret
        expiredAt:
          type: string
          description: datetime to expire (UTC)
    RetrieveSecretResponse:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: Content decrypt
    ErrorResponse:
      type: object
      required:
        - detail
        - statusCode
      properties:
        detail:
          type: string
          description: detail of error
        statusCode:
          type: integer
          description: http status code

